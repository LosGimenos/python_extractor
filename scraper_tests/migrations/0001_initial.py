# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-08-25 15:23
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import scraper_tests.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bartender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitterHandle', models.TextField(blank=True, db_index=True, null=True)),
                ('venueHandle', models.TextField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brandName', models.TextField(blank=True, null=True)),
                ('keyword', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_type', scraper_tests.models.NoneCompatibleCharField(blank=True, db_index=True, max_length=400, null=True)),
                ('is_all_binary_variables', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CategoryExclusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, db_index=True, null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Category')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_name', models.TextField(blank=True, db_index=True, null=True)),
                ('start_grid_row', models.IntegerField(null=True)),
                ('start_grid_column', models.IntegerField(null=True)),
                ('end_grid_row', models.IntegerField(null=True)),
                ('end_grid_column', models.IntegerField(null=True)),
                ('chart_type', models.TextField(blank=True, db_index=True, null=True)),
                ('filter_applied', models.BooleanField(default=False)),
                ('is_sorted', models.BooleanField(default=False)),
                ('sort_type', models.TextField(blank=True, db_index=True, null=True)),
                ('has_category_max', models.BooleanField(default=False)),
                ('number_max_categories', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ChartStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_style_name', models.TextField(blank=True, db_index=True, null=True)),
                ('has_title', models.BooleanField(default=False)),
                ('title_font_size', models.IntegerField(null=True)),
                ('title_font_color_rgb_1', models.IntegerField(null=True)),
                ('title_font_color_rgb_2', models.IntegerField(null=True)),
                ('title_font_color_rgb_3', models.IntegerField(null=True)),
                ('title_is_bold', models.BooleanField(default=False)),
                ('has_legend', models.BooleanField(default=False)),
                ('legend_position', models.TextField(blank=True, db_index=True, null=True)),
                ('legend_font_size', models.IntegerField(null=True)),
                ('legend_font_color_rgb_1', models.IntegerField(null=True)),
                ('legend_font_color_rgb_2', models.IntegerField(null=True)),
                ('legend_font_color_rgb_3', models.IntegerField(null=True)),
                ('data_labels_number_format', models.TextField(blank=True, db_index=True, null=True)),
                ('data_labels_font_size', models.IntegerField(null=True)),
                ('data_labels_position', models.TextField(blank=True, db_index=True, null=True)),
                ('data_labels_font_color_rgb_1', models.IntegerField(null=True)),
                ('data_labels_font_color_rgb_2', models.IntegerField(null=True)),
                ('data_labels_font_color_rgb_3', models.IntegerField(null=True)),
                ('category_axis_has_major_gridlines', models.BooleanField(default=False)),
                ('category_axis_has_minor_gridlines', models.BooleanField(default=False)),
                ('category_axis_tick_labels_font_size', models.IntegerField(null=True)),
                ('category_axis_tick_labels_font_color_rgb_1', models.IntegerField(null=True)),
                ('category_axis_tick_labels_font_color_rgb_2', models.IntegerField(null=True)),
                ('category_axis_tick_labels_font_color_rgb_3', models.IntegerField(null=True)),
                ('has_value_axis', models.BooleanField(default=False)),
                ('has_data_labels', models.BooleanField(default=False)),
                ('is_auto_min_max', models.BooleanField(default=True)),
                ('value_axis_min_scale', models.FloatField(null=True)),
                ('value_axis_max_scale', models.FloatField(null=True)),
                ('value_axis_has_major_gridlines', models.BooleanField(default=False)),
                ('value_axis_has_minor_gridlines', models.BooleanField(default=False)),
                ('value_axis_tick_labels_number_format', models.TextField(blank=True, db_index=True, null=True)),
                ('value_axis_tick_labels_are_bold', models.BooleanField(default=False)),
                ('value_axis_tick_labels_font_size', models.IntegerField(null=True)),
                ('value_axis_tick_labels_font_color_rgb_1', models.IntegerField(null=True)),
                ('value_axis_tick_labels_font_color_rgb_2', models.IntegerField(null=True)),
                ('value_axis_tick_labels_font_color_rgb_3', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.TextField(blank=True, db_index=True, null=True)),
                ('column_number', models.IntegerField(db_index=True, null=True)),
                ('is_binary_variable', models.BooleanField(default=False)),
                ('true_value', models.TextField(blank=True, db_index=True, null=True)),
                ('false_value', models.TextField(blank=True, db_index=True, null=True)),
                ('is_text_variable', models.BooleanField(default=False)),
                ('is_number_variable', models.BooleanField(default=False)),
                ('is_date_variable', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(blank=True, db_index=True, null=True)),
                ('date', models.DateTimeField(null=True)),
                ('username', models.TextField(blank=True, db_index=True, null=True)),
                ('comment_text', models.TextField(blank=True, null=True)),
                ('total_who_voted', models.IntegerField(null=True)),
                ('total_who_voted_helpful', models.IntegerField(null=True)),
                ('is_brand_consumer_care', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(null=True)),
                ('number', models.FloatField(null=True)),
                ('column', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Column')),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_ID', models.TextField(blank=True, db_index=True, null=True)),
                ('path', models.TextField(blank=True, null=True)),
                ('dataset_name', models.TextField(blank=True, db_index=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('id_column', models.IntegerField(null=True)),
                ('date_column', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, db_index=True, null=True)),
                ('chart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Chart')),
                ('column', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Column')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InstagramGeolocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instagramUrl', models.TextField(blank=True, db_index=True, null=True)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitorID', models.TextField(blank=True, db_index=True, null=True)),
                ('keyword', models.TextField(blank=True, null=True)),
                ('backfill_date', models.TextField(blank=True, db_index=True, null=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(blank=True, null=True)),
                ('statusID', models.TextField(blank=True, null=True)),
                ('fbLocationUrl', models.TextField(blank=True, null=True)),
                ('monitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Monitor')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PostData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('monitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Monitor')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Post')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PowerpointBuild',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presentation_name', models.TextField(blank=True, db_index=True, null=True)),
                ('default_slide_layout_index', models.IntegerField(default=5, null=True)),
                ('is_from_existing_presentation', models.BooleanField(default=False)),
                ('existing_presentation_filename', models.TextField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(blank=True, db_index=True, null=True)),
                ('brand', models.TextField(blank=True, db_index=True, null=True)),
                ('group', models.TextField(blank=True, db_index=True, null=True)),
                ('product_line', models.TextField(blank=True, db_index=True, null=True)),
                ('product', models.TextField(blank=True, db_index=True, null=True)),
                ('average_rating', models.FloatField(null=True)),
                ('total_number_reviews', models.IntegerField(null=True)),
                ('num_reviews_one_star', models.IntegerField(null=True)),
                ('num_reviews_two_stars', models.IntegerField(null=True)),
                ('num_reviews_three_stars', models.IntegerField(null=True)),
                ('num_reviews_four_stars', models.IntegerField(null=True)),
                ('num_reviews_five_stars', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProductPageUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(blank=True, db_index=True, null=True)),
                ('brand', models.TextField(blank=True, db_index=True, null=True)),
                ('group', models.TextField(blank=True, db_index=True, null=True)),
                ('product_line', models.TextField(blank=True, db_index=True, null=True)),
                ('product', models.TextField(blank=True, db_index=True, null=True)),
                ('url', models.TextField(blank=True, db_index=True, null=True)),
                ('source_data_path', models.TextField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.TextField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_id', models.TextField(blank=True, db_index=True, null=True)),
                ('url', models.TextField(blank=True, db_index=True, null=True)),
                ('date', models.DateTimeField(null=True)),
                ('title', models.TextField(blank=True, db_index=True, null=True)),
                ('username', models.TextField(blank=True, db_index=True, null=True)),
                ('review_text', models.TextField(blank=True, null=True)),
                ('rating', models.FloatField(null=True)),
                ('total_who_voted', models.IntegerField(null=True)),
                ('total_who_voted_helpful', models.IntegerField(null=True)),
                ('num_comments', models.IntegerField(null=True)),
                ('would_recommend', models.TextField(blank=True, db_index=True, null=True)),
                ('is_from_brand_website', models.TextField(blank=True, db_index=True, null=True)),
                ('skin_type', models.TextField(blank=True, db_index=True, null=True)),
                ('gender', models.TextField(blank=True, db_index=True, null=True)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Product')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Project')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Row',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_name', models.TextField(blank=True, db_index=True, null=True)),
                ('row_number', models.IntegerField(db_index=True, null=True)),
                ('matches_filters', models.BooleanField(default=True)),
                ('matches_category', models.BooleanField(default=True)),
                ('matches_split', models.BooleanField(default=True)),
                ('dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_type', models.TextField(blank=True, db_index=True, null=True)),
                ('denominator_type', models.TextField(blank=True, db_index=True, null=True)),
                ('split_applied', models.BooleanField(default=False)),
                ('chart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Chart')),
                ('presentation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Presentation')),
                ('series_calculation_variable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='series_calculation_variable', to='scraper_tests.Column')),
                ('series_split_variable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='series_split_variable', to='scraper_tests.Column')),
                ('series_weighting_variable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='series_weighting_variable', to='scraper_tests.Column')),
            ],
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slide_layout_index', models.IntegerField(null=True)),
                ('slide_name', models.TextField(blank=True, db_index=True, null=True)),
                ('slide_type', models.TextField(blank=True, db_index=True, null=True)),
                ('slide_number', models.IntegerField(null=True)),
                ('number_grid_rows', models.IntegerField(null=True)),
                ('number_grid_columns', models.IntegerField(null=True)),
                ('width', models.FloatField(null=True)),
                ('width_margin_left', models.FloatField(null=True)),
                ('width_margin_right', models.FloatField(null=True)),
                ('height', models.FloatField(null=True)),
                ('height_margin_top', models.FloatField(null=True)),
                ('height_margin_bottom', models.FloatField(null=True)),
                ('presentation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Presentation')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SplitExclusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, db_index=True, null=True)),
                ('column', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Column')),
                ('series', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Series')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topicName', models.TextField(blank=True, null=True)),
                ('keyword', models.TextField(blank=True, null=True)),
                ('monitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Monitor')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TwitterRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variableName', models.TextField(blank=True, null=True)),
                ('monitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Monitor')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venueID', models.TextField(blank=True, db_index=True, null=True)),
                ('twitterHandle', models.TextField(blank=True, db_index=True, null=True)),
                ('instagramHandle', models.TextField(blank=True, db_index=True, null=True)),
                ('latMin', models.FloatField()),
                ('lonMin', models.FloatField()),
                ('latMax', models.FloatField()),
                ('lonMax', models.FloatField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='series',
            name='slide',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Slide'),
        ),
        migrations.AddField(
            model_name='productpageurl',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Project'),
        ),
        migrations.AddField(
            model_name='product',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Project'),
        ),
        migrations.AddField(
            model_name='postdata',
            name='variable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Variable'),
        ),
        migrations.AddField(
            model_name='data',
            name='dataset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Dataset'),
        ),
        migrations.AddField(
            model_name='data',
            name='row',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Row'),
        ),
        migrations.AddField(
            model_name='comment',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Product'),
        ),
        migrations.AddField(
            model_name='comment',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Project'),
        ),
        migrations.AddField(
            model_name='comment',
            name='review',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Review'),
        ),
        migrations.AddField(
            model_name='column',
            name='dataset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Dataset'),
        ),
        migrations.AddField(
            model_name='chart',
            name='dataset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Dataset'),
        ),
        migrations.AddField(
            model_name='chart',
            name='presentation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Presentation'),
        ),
        migrations.AddField(
            model_name='chart',
            name='slide',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Slide'),
        ),
        migrations.AddField(
            model_name='chart',
            name='style',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scraper_tests.ChartStyle'),
        ),
        migrations.AddField(
            model_name='categoryexclusion',
            name='column',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Column'),
        ),
        migrations.AddField(
            model_name='category',
            name='category_binary_variables',
            field=models.ManyToManyField(related_name='category_binary_variables', to='scraper_tests.Column'),
        ),
        migrations.AddField(
            model_name='category',
            name='category_variable',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category_variable', to='scraper_tests.Column'),
        ),
        migrations.AddField(
            model_name='category',
            name='chart',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Chart'),
        ),
        migrations.AddField(
            model_name='category',
            name='presentation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Presentation'),
        ),
        migrations.AddField(
            model_name='category',
            name='slide',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Slide'),
        ),
        migrations.AddField(
            model_name='brand',
            name='monitor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='scraper_tests.Monitor'),
        ),
        migrations.AlterIndexTogether(
            name='data',
            index_together=set([('dataset', 'row', 'column')]),
        ),
    ]
